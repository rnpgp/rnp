name: centos8

on:
  push:
    branches:
      - master
      - 'release/**'
    paths-ignore:
      - '/*.sh'
      - '/.*'
      - '/_*'
      - '/vcpkg.txt'
      - 'Brewfile'
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - '**.nix'
      - 'flake.lock'
      - '.github/workflows/*.yml'
      - '!.github/workflows/centos8.yml'
  pull_request:
    paths-ignore:
      - '/*.sh'
      - '/.*'
      - '/_*'
      - '/vcpkg.txt'
      - 'Brewfile'
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - '**.nix'
      - 'flake.lock'

env:
  CORES: 2
  CODECOV_TOKEN: dbecf176-ea3f-4832-b743-295fd71d0fad
  LANG: C.UTF-8
  LC_ALL: C.UTF-8
  LC_LANG: C.UTF-8
  USE_STATIC_DEPENDENCIES: yes
  DOWNLOAD_RUBYRNP: Off

jobs:
  tests:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    container:
      image: tgagor/centos:stream8
    timeout-minutes: 70
    strategy:
      fail-fast: false
      matrix:
        env:
          - BUILD_MODE: normal
            GPG_VERSION: stable
            CC: gcc
            CXX: g++
            ENABLE_SM2: On
          - BUILD_MODE: normal
            GPG_VERSION: beta
            CC: gcc
            CXX: g++
            ENABLE_SM2: On
          - BUILD_MODE: normal
            GPG_VERSION: 2.3.1
            CC: gcc
            CXX: g++
            ENABLE_SM2: On
          - BUILD_MODE: normal
            GPG_VERSION: stable
            CC: clang
            CXX: clang++
            ENABLE_SM2: On
          - BUILD_MODE: normal
            GPG_VERSION: beta
            CC: clang
            CXX: clang++
            ENABLE_SM2: On
          - BUILD_MODE: normal
            GPG_VERSION: 2.3.1
            CC: clang
            CXX: clang++
            ENABLE_SM2: On
# Coverage can only been tested with the GNU compiler
# Upload only single report to the codecov to avoid mess
          - BUILD_MODE: coverage
            GPG_VERSION: beta
            RNP_TESTS: ".*"
            CC: gcc
            CXX: g++
            ENABLE_SM2: On
# Sanitize is only tested with the clang compiler
# see env-common.inc.sh
          - BUILD_MODE: sanitize
            GPG_VERSION: stable
            CC: clang
            CXX: clang++
            ENABLE_SM2: On
          - BUILD_MODE: sanitize
            GPG_VERSION: beta
            CC: clang
            CXX: clang++
            ENABLE_SM2: On
          - BUILD_MODE: normal
            GPG_VERSION: stable
            CC: gcc
            CXX: g++
            ENABLE_SM2: Off
    env: ${{ matrix.env }}
    name: centos:stream8 Botan [test type ${{ matrix.env.RNP_TESTS }}; mode ${{ matrix.env.BUILD_MODE }}; CC ${{ matrix.env.CC }}; GnuPG ${{ matrix.env.GPG_VERSION }}; SM2 ${{ matrix.env.ENABLE_SM2 }}]
    steps:
      - run: |
          yum -y install git
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Add rnpuser
        run: |
          useradd rnpuser
          yum -y -q install sudo
          echo -e "rnpuser\tALL=(ALL)\tNOPASSWD:\tALL" > /etc/sudoers.d/rnpuser
          echo -e "rnpuser\tsoft\tnproc\tunlimited\n" > /etc/security/limits.d/30-rnpuser.conf
      - name: Setup environment
        run: |
          . ci/gha/setup-env.inc.sh
          exec su rnpuser -c ci/install_noncacheable_dependencies.sh
      - name: Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ github.workflow }}-${{ runner.os }}-${{ matrix.env.BUILD_MODE }}-${{ matrix.env.CC }}-gpg-${{ matrix.env.GPG_VERSION }}-sm2-${{ matrix.env.ENABLE_SM2 }}-${{ hashFiles('ci/**') }}-${{ hashFiles('.github/workflows/**') }}
      - name: Build cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          set -x
          chown -R rnpuser:rnpuser $PWD
          exec su rnpuser -c ci/install_cacheable_dependencies.sh
      - name: tests
        run: |
          set -x
          chown -R rnpuser:rnpuser $PWD
          exec su rnpuser -c ci/run.sh
      - name: symbol-visibility
        run: |
          set -euxo pipefail
          nm --defined-only -g $RNP_INSTALL/lib64/librnp*.so > exports
          [ $(grep -c dst_close exports) == "0" ]
          [ $(grep -c Botan exports) == "0" ]
          [ $(grep -c rnp_version_string_full exports) == "1" ]
      - name: supported-features
        run: |
          set -euxo pipefail
          export LD_LIBRARY_PATH="${BOTAN_INSTALL}/lib64:${JSONC_INSTALL}/lib64:${RNP_INSTALL}/lib64"
          $RNP_INSTALL/bin/rnp --version > rnp-version
          # Make sure that we support all features which should be supported
          supported=( RSA ELGAMAL DSA ECDH ECDSA EDDSA \
            IDEA TRIPLEDES CAST5 BLOWFISH AES128 AES192 AES256 TWOFISH CAMELLIA128 CAMELLIA192 CAMELLIA256 \
            EAX OCB \
            MD5 SHA1 RIPEMD160 SHA256 SHA384 SHA512 SHA224 SHA3-256 SHA3-512 \
            ZIP ZLIB BZip2 \
            "NIST P-256" "NIST P-384" "NIST P-521" Ed25519 Curve25519 secp256k1 )
          unsupported=( )
          sm2=( SM2 SM4 SM3 "SM2 P-256" )
          bp=( brainpoolP256r1 brainpoolP384r1 brainpoolP512r1 )
          # SM2
          if [[ "$ENABLE_SM2" == "On" ]] ;then
            supported+=("${sm2[@]}")
          else
            unsupported+=("${sm2[@]}")
          fi
          # Brainpool curves - supported by Botan by default 
          supported+=("${bp[@]}")
          for feature in "${supported[@]}"
          do
            [ $(grep -ci "$feature" rnp-version) -ge "1" ]
          done
          for feature in "${unsupported[@]}"
          do
            [ $(grep -ci "$feature" rnp-version) == "0" ]
          done

  pkgconfig-cmake-target:
    runs-on: ubuntu-latest
    # TODO: re-enable when the following can pass
    if: "${{ false && !contains(github.event.head_commit.message, 'skip ci') }}"
    container:
      image: tgagor/centos:stream8
    timeout-minutes: 10
    strategy:
      matrix:
        env:
          - BUILD_SHARED_LIBS: yes
          - BUILD_SHARED_LIBS: no
    env: ${{ matrix.env }}
    continue-on-error: true
    steps:
      - run: |
          yum -y install git
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Test
        run: |

          # cmake
          set -euxo pipefail
          export USE_STATIC_DEPENDENCIES=no
          ci/install_noncacheable_dependencies.sh
          ci/install_cacheable_dependencies.sh

          . ci/env.inc.sh

          # build+install
          build_and_install /usr

          # check for install issues
          check_build
          build_example_pkgconfig
      - name: Package
        run: |
          set -euxo pipefail
          yum install -y rpm-build
          cpack -G RPM
